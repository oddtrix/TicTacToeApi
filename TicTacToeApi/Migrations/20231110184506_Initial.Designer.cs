// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToeApi.Contexts;

#nullable disable

namespace TicTacToeApi.Migrations
{
    [DbContext(typeof(AppDomainContext))]
    [Migration("20231110184506_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.FieldMoves", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FieldId");

                    b.ToTable("FieldMoves");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GameStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("FieldId")
                        .IsUnique();

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.GamePlayerJunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayerJunction");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("messageBody")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Cell", b =>
                {
                    b.HasOne("TicTacToeApi.Models.Domain.FieldMoves", "FieldMoves")
                        .WithMany("Cells")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeApi.Models.Domain.Player", "Player")
                        .WithMany("Cells")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldMoves");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.FieldMoves", b =>
                {
                    b.HasOne("TicTacToeApi.Models.Domain.Field", "Field")
                        .WithOne("FieldMoves")
                        .HasForeignKey("TicTacToeApi.Models.Domain.FieldMoves", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Game", b =>
                {
                    b.HasOne("TicTacToeApi.Models.Domain.Chat", "Chat")
                        .WithOne("Game")
                        .HasForeignKey("TicTacToeApi.Models.Domain.Game", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeApi.Models.Domain.Field", "Field")
                        .WithOne("Game")
                        .HasForeignKey("TicTacToeApi.Models.Domain.Game", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeApi.Models.Domain.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Chat");

                    b.Navigation("Field");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.GamePlayerJunction", b =>
                {
                    b.HasOne("TicTacToeApi.Models.Domain.Game", "Game")
                        .WithMany("GamesPlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeApi.Models.Domain.Player", "Player")
                        .WithMany("GamesPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Message", b =>
                {
                    b.HasOne("TicTacToeApi.Models.Domain.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeApi.Models.Domain.Player", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Chat", b =>
                {
                    b.Navigation("Game");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Field", b =>
                {
                    b.Navigation("FieldMoves");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.FieldMoves", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Game", b =>
                {
                    b.Navigation("GamesPlayers");
                });

            modelBuilder.Entity("TicTacToeApi.Models.Domain.Player", b =>
                {
                    b.Navigation("Cells");

                    b.Navigation("GamesPlayers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
